package interfaz;

import dominio.*;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.sound.sampled.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import utils.RenderizadorResultado;

/**
 *
 * @author Agustín Juárez - 236487
 * @author Eduardo Thevenet - 168626
 */
public class VentanaCargaIndividual extends javax.swing.JFrame {

    private String path;
    private Sistema modelo;
    private String erroresValidaciones = "";

    /**
     * Creates new form ventanaAgregarDocente
     */
    public VentanaCargaIndividual() {
        initComponents();
    }

    public VentanaCargaIndividual(Sistema modelo) {

        initComponents();
        jFileChooser.setApproveButtonText("Seleccionar");
        this.modelo = modelo;
        this.setLocationRelativeTo(null);
        this.cargarListaProblemas();
        this.cargarListaEquipos();
        this.cargarComboLenguajes();
    }

    private void cargarListaProblemas() {

        DefaultListModel l = new DefaultListModel();
        for (Problema pro : this.modelo.getProblemas()) {
            l.addElement(pro);
        }
        this.jListProblemas.setModel(l);
    }

    private void cargarListaEquipos() {

        DefaultListModel l = new DefaultListModel();
        for (Equipo eq : this.modelo.getEquipos()) {
            l.addElement(eq);
        }
        this.jListEquipos.setModel(l);
    }

    public void cargarComboLenguajes() {
        for (String lang : this.modelo.getLenguajes()) {
            this.jComboBoxLenguaje.addItem(lang);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jFileChooser = new javax.swing.JFileChooser();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListProblemas = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListEquipos = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldTiempo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxLenguaje = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListResultado = new javax.swing.JList<>();
        jLabelCorrecto = new javax.swing.JLabel();
        jLabelCantErrores = new javax.swing.JLabel();
        jButtonVerificar = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ingreso manual");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(250, 440));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        jLabel1.setText("Resultado");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(560, 20, 110, 24);

        jFileChooser.setCurrentDirectory(null);
        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });
        getContentPane().add(jFileChooser);
        jFileChooser.setBounds(10, 210, 420, 230);

        jLabel6.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        jLabel6.setText("Problema");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 20, 60, 24);

        jScrollPane4.setViewportView(jListProblemas);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(20, 50, 140, 90);

        jScrollPane5.setViewportView(jListEquipos);

        getContentPane().add(jScrollPane5);
        jScrollPane5.setBounds(180, 50, 240, 90);

        jLabel8.setText("Lenguaje");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(220, 160, 70, 14);
        getContentPane().add(jTextFieldTiempo);
        jTextFieldTiempo.setBounds(80, 160, 80, 20);

        jLabel9.setText("Tiempo");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(20, 160, 50, 14);

        getContentPane().add(jComboBoxLenguaje);
        jComboBoxLenguaje.setBounds(300, 160, 120, 22);

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        jLabel3.setText("Equipo");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 20, 50, 24);

        jScrollPane6.setViewportView(jListResultado);

        getContentPane().add(jScrollPane6);
        jScrollPane6.setBounds(490, 50, 200, 250);
        getContentPane().add(jLabelCorrecto);
        jLabelCorrecto.setBounds(570, 320, 60, 0);
        getContentPane().add(jLabelCantErrores);
        jLabelCantErrores.setBounds(540, 350, 130, 0);

        jButtonVerificar.setText("VERIFICAR");
        jButtonVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerificarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonVerificar);
        jButtonVerificar.setBounds(140, 490, 210, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        if (evt.getActionCommand().equals(javax.swing.JFileChooser.APPROVE_SELECTION)) {
            JOptionPane.showMessageDialog(null, "El archivo ha sido seleccionado.", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.path = jFileChooser.getSelectedFile().getPath();
        } else if (evt.getActionCommand().equals(javax.swing.JFileChooser.CANCEL_SELECTION)) {
            this.path = "";
            JOptionPane.showMessageDialog(null, "El archivo ha sido deseleccionado.", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jFileChooserActionPerformed

    private boolean validandoCampos() {
        this.erroresValidaciones = "";
        boolean ok = false;
        if (jListProblemas.getSelectedValue() != null && jListEquipos.getSelectedValue() != null && !jTextFieldTiempo.getText().equals("") && !this.path.equals("")) {
            if (!this.modelo.getHelper().esNumero(jTextFieldTiempo.getText())) {
                erroresValidaciones += "El campo tiempo debe contener solamente números \n";
            } else {
                ok = true;
            }
        }

        return ok;
    }

    public void correctSound() throws IOException, UnsupportedAudioFileException, LineUnavailableException {
        // from a wave File
        File soundFile = new File("correct.wav");
        AudioInputStream audioIn = AudioSystem.getAudioInputStream(soundFile);
        Clip clip = AudioSystem.getClip();
        clip.open(audioIn);
        clip.start();
    }

    public void incorrectSound() throws IOException, UnsupportedAudioFileException, LineUnavailableException {
        // from a wave File
        File soundFile = new File("fail.wav");
        AudioInputStream audioIn = AudioSystem.getAudioInputStream(soundFile);
        Clip clip = AudioSystem.getClip();
        clip.open(audioIn);
        clip.start();
    }

    private void jButtonVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerificarActionPerformed
        String linkProblemaSeleccionado;
        boolean validate;
        int cantErrores = 0;
        validate = false;
        boolean tieneErrorDatos = false;

        int tiempo = this.modelo.getHelper().covertToNumber(jTextFieldTiempo.getText());

        //EQUIPO
        List<String> selectEquipos = jListEquipos.getSelectedValuesList();
        Equipo selectedE = null;
        if (selectEquipos.size() == 1) {
            for (int i = 0; i < selectEquipos.size(); i++) {
                selectedE = this.modelo.getEquipoPorNombre(((Equipo) selectEquipos.toArray()[i]).getNombre());
            }
        }

        //PROBLEMA 
        List<String> selected = jListProblemas.getSelectedValuesList();
        Problema selectedP = null;
        if (selected.size() != 0) {
            if (selected.size() == 1) {
                int index = 1;

                for (int i = 0; i < selected.size(); i++) {
                    selectedP = this.modelo.getProblemaPorTitulo(((Problema) selected.toArray()[i]).getTitulo());
                }

            }
        }

        if (this.validandoCampos()) {
            if (selectedP != null && selectedE != null) {
                if (!this.modelo.equipoResolvioProblema(selectedE, selectedP)) {
                    linkProblemaSeleccionado = selectedP.getLink();

                    ArrayList<String> lineasValidaciones = this.modelo.compareArchives(this.path, linkProblemaSeleccionado);
                    DefaultListModel<String> model = new DefaultListModel<>();
                    int index = 1;
                    String mensajeValidacion = "";
                    int count = 0;
                    for (String linea : lineasValidaciones) {
                        count++;
                        if (count < 20) {
                            switch (linea) {
                                case "f":
                                    mensajeValidacion = "-Linea " + index + " Error de Formato";
                                    cantErrores += 1;
                                    break;
                                case "d":
                                    mensajeValidacion = "*Linea " + index + " Error de datos";
                                    cantErrores += 1;
                                    tieneErrorDatos = true;
                                    break;
                                default:
                                    mensajeValidacion = "+Linea " + index + " ok";
                                    break;
                            }
                            model.addElement(mensajeValidacion);
                            index++;
                        }
                    }
                    int cantLineas = model.getSize();
                    String resultado;
                    boolean resolvio = false;

                    if (cantErrores == 0) {
                        resultado = "Correcto";
                        resolvio = true;
                        selectedE.setEjerciciosResueltos(1);
                        selectedE.setTiempoTotalEjercicios(Integer.parseInt(jTextFieldTiempo.getText()));
                        jLabelCorrecto.setForeground(Color.green);
                        try {
                            this.correctSound();
                        } catch (Exception e) {
                            System.out.println("no sonido");
                        }

                    } else {
                        resultado = "Incorrecto";
                        selectedE.agregarMulta(selectedP);
                        jLabelCorrecto.setForeground(Color.red);
                        jLabelCantErrores.setText(cantErrores + " errores en " + cantLineas + " lineas");
                        try {
                            this.incorrectSound();
                        } catch (Exception e) {
                            System.out.println("no sonido");
                        }
                    }

                    String descripcion = "";

                    if (cantErrores > 0) {
                        if (tieneErrorDatos) {
                            descripcion = "incorrecto datos";
                        } else {
                            descripcion = "incorrecto formato";
                        }
                    } else {
                        descripcion = "ok";
                    }

                    jLabelCorrecto.setText(resultado);

                    jListResultado.setModel(model);
                    ListCellRenderer renderer = new RenderizadorResultado();
                    jListResultado.setCellRenderer(renderer);
                    System.out.println("cant errores:" + cantErrores);

                    Envio env = new Envio(selectedE, selectedP, Integer.parseInt(jTextFieldTiempo.getText()), this.modelo.getLenguajePorIndex(jComboBoxLenguaje.getSelectedIndex()), this.path, resolvio, descripcion);
                    this.modelo.agregarEnvio(env);
                } else {
                    JOptionPane.showMessageDialog(null, "El equipo '" + selectedE.getNombre() + "' ya ha resuelto el problema seleccionado.", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debes seleccionar equipo y problema", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (this.erroresValidaciones != "") {
            JOptionPane.showMessageDialog(null, this.erroresValidaciones, "Error en validaciones", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Faltan completar campos.", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonVerificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonVerificar;
    private javax.swing.JComboBox<String> jComboBoxLenguaje;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCantErrores;
    private javax.swing.JLabel jLabelCorrecto;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jListEquipos;
    private javax.swing.JList<String> jListProblemas;
    private javax.swing.JList<String> jListResultado;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextFieldTiempo;
    // End of variables declaration//GEN-END:variables

}
